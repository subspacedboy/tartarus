# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bots

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CreateContractRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CreateContractRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCreateContractRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CreateContractRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CreateContractRequest
    def ShareableToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CreateContractRequest
    def Contract(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CreateContractRequest
    def ContractAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CreateContractRequest
    def ContractLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CreateContractRequest
    def ContractIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def CreateContractRequestStart(builder):
    builder.StartObject(2)

def Start(builder):
    CreateContractRequestStart(builder)

def CreateContractRequestAddShareableToken(builder, shareableToken):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shareableToken), 0)

def AddShareableToken(builder, shareableToken):
    CreateContractRequestAddShareableToken(builder, shareableToken)

def CreateContractRequestAddContract(builder, contract):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(contract), 0)

def AddContract(builder, contract):
    CreateContractRequestAddContract(builder, contract)

def CreateContractRequestStartContractVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartContractVector(builder, numElems):
    return CreateContractRequestStartContractVector(builder, numElems)

def CreateContractRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return CreateContractRequestEnd(builder)
