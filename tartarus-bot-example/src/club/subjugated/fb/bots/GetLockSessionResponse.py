# automatically generated by the FlatBuffers compiler, do not modify

# namespace: bots

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GetLockSessionResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetLockSessionResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetLockSessionResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetLockSessionResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GetLockSessionResponse
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GetLockSessionResponse
    def PublicKey(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GetLockSessionResponse
    def PublicKeyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # GetLockSessionResponse
    def PublicKeyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GetLockSessionResponse
    def PublicKeyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # GetLockSessionResponse
    def AvailableForContract(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # GetLockSessionResponse
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from club.subjugated.fb.bots.Error import Error
            obj = Error()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def GetLockSessionResponseStart(builder):
    builder.StartObject(4)

def Start(builder):
    GetLockSessionResponseStart(builder)

def GetLockSessionResponseAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    GetLockSessionResponseAddName(builder, name)

def GetLockSessionResponseAddPublicKey(builder, publicKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(publicKey), 0)

def AddPublicKey(builder, publicKey):
    GetLockSessionResponseAddPublicKey(builder, publicKey)

def GetLockSessionResponseStartPublicKeyVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartPublicKeyVector(builder, numElems):
    return GetLockSessionResponseStartPublicKeyVector(builder, numElems)

def GetLockSessionResponseAddAvailableForContract(builder, availableForContract):
    builder.PrependBoolSlot(2, availableForContract, 0)

def AddAvailableForContract(builder, availableForContract):
    GetLockSessionResponseAddAvailableForContract(builder, availableForContract)

def GetLockSessionResponseAddError(builder, error):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(error), 0)

def AddError(builder, error):
    GetLockSessionResponseAddError(builder, error)

def GetLockSessionResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return GetLockSessionResponseEnd(builder)
