# automatically generated by the FlatBuffers compiler, do not modify

# namespace: event

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Event(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Event()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Event
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Event
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from club.subjugated.fb.event.CommonMetadata import CommonMetadata
            obj = CommonMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Event
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EventStart(builder):
    builder.StartObject(2)

def Start(builder):
    EventStart(builder)

def EventAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder, metadata):
    EventAddMetadata(builder, metadata)

def EventAddEventType(builder, eventType):
    builder.PrependInt8Slot(1, eventType, 0)

def AddEventType(builder, eventType):
    EventAddEventType(builder, eventType)

def EventEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventEnd(builder)
