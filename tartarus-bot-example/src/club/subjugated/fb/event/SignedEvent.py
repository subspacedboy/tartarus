# automatically generated by the FlatBuffers compiler, do not modify

# namespace: event

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SignedEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SignedEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSignedEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SignedEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SignedEvent
    def Signature(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SignedEvent
    def SignatureAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SignedEvent
    def SignatureLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SignedEvent
    def SignatureIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SignedEvent
    def Payload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from club.subjugated.fb.event.Event import Event
            obj = Event()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SignedEventStart(builder):
    builder.StartObject(2)

def Start(builder):
    SignedEventStart(builder)

def SignedEventAddSignature(builder, signature):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(signature), 0)

def AddSignature(builder, signature):
    SignedEventAddSignature(builder, signature)

def SignedEventStartSignatureVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartSignatureVector(builder, numElems):
    return SignedEventStartSignatureVector(builder, numElems)

def SignedEventAddPayload(builder, payload):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)

def AddPayload(builder, payload):
    SignedEventAddPayload(builder, payload)

def SignedEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return SignedEventEnd(builder)
