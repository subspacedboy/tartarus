# automatically generated by the FlatBuffers compiler, do not modify

# namespace: message

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Acknowledgement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Acknowledgement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAcknowledgement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Acknowledgement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Acknowledgement
    def PublicKey(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Acknowledgement
    def PublicKeyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Acknowledgement
    def PublicKeyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Acknowledgement
    def PublicKeyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Acknowledgement
    def Session(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Acknowledgement
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Acknowledgement
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def AcknowledgementStart(builder):
    builder.StartObject(4)

def Start(builder):
    AcknowledgementStart(builder)

def AcknowledgementAddPublicKey(builder, publicKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(publicKey), 0)

def AddPublicKey(builder, publicKey):
    AcknowledgementAddPublicKey(builder, publicKey)

def AcknowledgementStartPublicKeyVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartPublicKeyVector(builder, numElems):
    return AcknowledgementStartPublicKeyVector(builder, numElems)

def AcknowledgementAddSession(builder, session):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(session), 0)

def AddSession(builder, session):
    AcknowledgementAddSession(builder, session)

def AcknowledgementAddSerialNumber(builder, serialNumber):
    builder.PrependUint16Slot(2, serialNumber, 0)

def AddSerialNumber(builder, serialNumber):
    AcknowledgementAddSerialNumber(builder, serialNumber)

def AcknowledgementAddCounter(builder, counter):
    builder.PrependUint16Slot(3, counter, 0)

def AddCounter(builder, counter):
    AcknowledgementAddCounter(builder, counter)

def AcknowledgementEnd(builder):
    return builder.EndObject()

def End(builder):
    return AcknowledgementEnd(builder)
