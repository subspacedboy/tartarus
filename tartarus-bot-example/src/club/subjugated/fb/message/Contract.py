# automatically generated by the FlatBuffers compiler, do not modify

# namespace: message

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Contract(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Contract()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContract(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Contract
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Contract
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Contract
    def PublicKey(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Contract
    def PublicKeyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Contract
    def PublicKeyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Contract
    def PublicKeyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Contract
    def Bots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from club.subjugated.fb.message.Bot import Bot
            obj = Bot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Contract
    def BotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Contract
    def BotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Contract
    def Terms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Contract
    def IsTemporaryUnlockAllowed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ContractStart(builder):
    builder.StartObject(5)

def Start(builder):
    ContractStart(builder)

def ContractAddSerialNumber(builder, serialNumber):
    builder.PrependUint16Slot(0, serialNumber, 0)

def AddSerialNumber(builder, serialNumber):
    ContractAddSerialNumber(builder, serialNumber)

def ContractAddPublicKey(builder, publicKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(publicKey), 0)

def AddPublicKey(builder, publicKey):
    ContractAddPublicKey(builder, publicKey)

def ContractStartPublicKeyVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartPublicKeyVector(builder, numElems):
    return ContractStartPublicKeyVector(builder, numElems)

def ContractAddBots(builder, bots):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bots), 0)

def AddBots(builder, bots):
    ContractAddBots(builder, bots)

def ContractStartBotsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBotsVector(builder, numElems):
    return ContractStartBotsVector(builder, numElems)

def ContractAddTerms(builder, terms):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(terms), 0)

def AddTerms(builder, terms):
    ContractAddTerms(builder, terms)

def ContractAddIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed):
    builder.PrependBoolSlot(4, isTemporaryUnlockAllowed, 0)

def AddIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed):
    ContractAddIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed)

def ContractEnd(builder):
    return builder.EndObject()

def End(builder):
    return ContractEnd(builder)
