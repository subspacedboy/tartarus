# automatically generated by the FlatBuffers compiler, do not modify

# namespace: firmware

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GetFirmwareChunkResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetFirmwareChunkResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetFirmwareChunkResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetFirmwareChunkResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GetFirmwareChunkResponse
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GetFirmwareChunkResponse
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GetFirmwareChunkResponse
    def Chunk(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GetFirmwareChunkResponse
    def ChunkAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # GetFirmwareChunkResponse
    def ChunkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GetFirmwareChunkResponse
    def ChunkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def GetFirmwareChunkResponseStart(builder):
    builder.StartObject(3)

def Start(builder):
    GetFirmwareChunkResponseStart(builder)

def GetFirmwareChunkResponseAddSize(builder, size):
    builder.PrependInt32Slot(0, size, 0)

def AddSize(builder, size):
    GetFirmwareChunkResponseAddSize(builder, size)

def GetFirmwareChunkResponseAddOffset(builder, offset):
    builder.PrependInt32Slot(1, offset, 0)

def AddOffset(builder, offset):
    GetFirmwareChunkResponseAddOffset(builder, offset)

def GetFirmwareChunkResponseAddChunk(builder, chunk):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(chunk), 0)

def AddChunk(builder, chunk):
    GetFirmwareChunkResponseAddChunk(builder, chunk)

def GetFirmwareChunkResponseStartChunkVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartChunkVector(builder, numElems):
    return GetFirmwareChunkResponseStartChunkVector(builder, numElems)

def GetFirmwareChunkResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return GetFirmwareChunkResponseEnd(builder)
