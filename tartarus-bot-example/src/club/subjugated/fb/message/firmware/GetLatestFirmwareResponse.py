# automatically generated by the FlatBuffers compiler, do not modify

# namespace: firmware

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GetLatestFirmwareResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetLatestFirmwareResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetLatestFirmwareResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetLatestFirmwareResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GetLatestFirmwareResponse
    def Firmware(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GetLatestFirmwareResponse
    def FirmwareAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # GetLatestFirmwareResponse
    def FirmwareLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GetLatestFirmwareResponse
    def FirmwareIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # GetLatestFirmwareResponse
    def Signature(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # GetLatestFirmwareResponse
    def SignatureAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # GetLatestFirmwareResponse
    def SignatureLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GetLatestFirmwareResponse
    def SignatureIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # GetLatestFirmwareResponse
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from club.subjugated.fb.message.firmware.Version import Version
            obj = Version()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GetLatestFirmwareResponse
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GetLatestFirmwareResponse
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def GetLatestFirmwareResponseStart(builder):
    builder.StartObject(5)

def Start(builder):
    GetLatestFirmwareResponseStart(builder)

def GetLatestFirmwareResponseAddFirmware(builder, firmware):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(firmware), 0)

def AddFirmware(builder, firmware):
    GetLatestFirmwareResponseAddFirmware(builder, firmware)

def GetLatestFirmwareResponseStartFirmwareVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartFirmwareVector(builder, numElems):
    return GetLatestFirmwareResponseStartFirmwareVector(builder, numElems)

def GetLatestFirmwareResponseAddSignature(builder, signature):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(signature), 0)

def AddSignature(builder, signature):
    GetLatestFirmwareResponseAddSignature(builder, signature)

def GetLatestFirmwareResponseStartSignatureVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartSignatureVector(builder, numElems):
    return GetLatestFirmwareResponseStartSignatureVector(builder, numElems)

def GetLatestFirmwareResponseAddVersion(builder, version):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)

def AddVersion(builder, version):
    GetLatestFirmwareResponseAddVersion(builder, version)

def GetLatestFirmwareResponseAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    GetLatestFirmwareResponseAddName(builder, name)

def GetLatestFirmwareResponseAddSize(builder, size):
    builder.PrependUint16Slot(4, size, 0)

def AddSize(builder, size):
    GetLatestFirmwareResponseAddSize(builder, size)

def GetLatestFirmwareResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return GetLatestFirmwareResponseEnd(builder)
