# automatically generated by the FlatBuffers compiler, do not modify

# namespace: message

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StartedUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StartedUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStartedUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StartedUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StartedUpdate
    def PublicKey(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StartedUpdate
    def PublicKeyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # StartedUpdate
    def PublicKeyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StartedUpdate
    def PublicKeyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StartedUpdate
    def Session(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StartedUpdate
    def StartedWithLocalContract(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StartedUpdate
    def CurrentContractSerial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # StartedUpdate
    def IsLocked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def StartedUpdateStart(builder):
    builder.StartObject(5)

def Start(builder):
    StartedUpdateStart(builder)

def StartedUpdateAddPublicKey(builder, publicKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(publicKey), 0)

def AddPublicKey(builder, publicKey):
    StartedUpdateAddPublicKey(builder, publicKey)

def StartedUpdateStartPublicKeyVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartPublicKeyVector(builder, numElems):
    return StartedUpdateStartPublicKeyVector(builder, numElems)

def StartedUpdateAddSession(builder, session):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(session), 0)

def AddSession(builder, session):
    StartedUpdateAddSession(builder, session)

def StartedUpdateAddStartedWithLocalContract(builder, startedWithLocalContract):
    builder.PrependBoolSlot(2, startedWithLocalContract, 0)

def AddStartedWithLocalContract(builder, startedWithLocalContract):
    StartedUpdateAddStartedWithLocalContract(builder, startedWithLocalContract)

def StartedUpdateAddCurrentContractSerial(builder, currentContractSerial):
    builder.PrependUint16Slot(3, currentContractSerial, 0)

def AddCurrentContractSerial(builder, currentContractSerial):
    StartedUpdateAddCurrentContractSerial(builder, currentContractSerial)

def StartedUpdateAddIsLocked(builder, isLocked):
    builder.PrependBoolSlot(4, isLocked, 0)

def AddIsLocked(builder, isLocked):
    StartedUpdateAddIsLocked(builder, isLocked)

def StartedUpdateEnd(builder):
    return builder.EndObject()

def End(builder):
    return StartedUpdateEnd(builder)
