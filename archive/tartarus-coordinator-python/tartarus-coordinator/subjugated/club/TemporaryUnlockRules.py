# automatically generated by the FlatBuffers compiler, do not modify

# namespace: club

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TemporaryUnlockRules(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TemporaryUnlockRules()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTemporaryUnlockRules(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TemporaryUnlockRules
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TemporaryUnlockRules
    def MaxUnlocks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # TemporaryUnlockRules
    def TimeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def TemporaryUnlockRulesStart(builder):
    builder.StartObject(2)

def Start(builder):
    TemporaryUnlockRulesStart(builder)

def TemporaryUnlockRulesAddMaxUnlocks(builder, maxUnlocks):
    builder.PrependUint16Slot(0, maxUnlocks, 0)

def AddMaxUnlocks(builder, maxUnlocks):
    TemporaryUnlockRulesAddMaxUnlocks(builder, maxUnlocks)

def TemporaryUnlockRulesAddTimeLimit(builder, timeLimit):
    builder.PrependUint16Slot(1, timeLimit, 0)

def AddTimeLimit(builder, timeLimit):
    TemporaryUnlockRulesAddTimeLimit(builder, timeLimit)

def TemporaryUnlockRulesEnd(builder):
    return builder.EndObject()

def End(builder):
    return TemporaryUnlockRulesEnd(builder)
