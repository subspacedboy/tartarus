// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class AbortCommand : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AbortCommand {
        __init(_i, _bb)
        return this
    }
    val contractSerialNumber : UShort
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val serialNumber : UShort
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val counter : UShort
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAbortCommand(_bb: ByteBuffer): AbortCommand = getRootAsAbortCommand(_bb, AbortCommand())
        fun getRootAsAbortCommand(_bb: ByteBuffer, obj: AbortCommand): AbortCommand {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAbortCommand(builder: FlatBufferBuilder, contractSerialNumber: UShort, serialNumber: UShort, counter: UShort) : Int {
            builder.startTable(3)
            addCounter(builder, counter)
            addSerialNumber(builder, serialNumber)
            addContractSerialNumber(builder, contractSerialNumber)
            return endAbortCommand(builder)
        }
        fun startAbortCommand(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addContractSerialNumber(builder: FlatBufferBuilder, contractSerialNumber: UShort) = builder.addShort(0, contractSerialNumber.toShort(), 0)
        fun addSerialNumber(builder: FlatBufferBuilder, serialNumber: UShort) = builder.addShort(1, serialNumber.toShort(), 0)
        fun addCounter(builder: FlatBufferBuilder, counter: UShort) = builder.addShort(2, counter.toShort(), 0)
        fun endAbortCommand(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
