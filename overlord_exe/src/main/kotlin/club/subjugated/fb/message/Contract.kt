// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Contract : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Contract {
        __init(_i, _bb)
        return this
    }
    val serialNumber : UShort
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    fun publicKey(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val publicKeyLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val publicKeyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun publicKeyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    fun bots(j: Int) : club.subjugated.fb.message.Bot? = bots(club.subjugated.fb.message.Bot(), j)
    fun bots(obj: club.subjugated.fb.message.Bot, j: Int) : club.subjugated.fb.message.Bot? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val botsLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val terms : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val termsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun termsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val isTemporaryUnlockAllowed : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsContract(_bb: ByteBuffer): Contract = getRootAsContract(_bb, Contract())
        fun getRootAsContract(_bb: ByteBuffer, obj: Contract): Contract {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createContract(builder: FlatBufferBuilder, serialNumber: UShort, publicKeyOffset: Int, botsOffset: Int, termsOffset: Int, isTemporaryUnlockAllowed: Boolean) : Int {
            builder.startTable(5)
            addTerms(builder, termsOffset)
            addBots(builder, botsOffset)
            addPublicKey(builder, publicKeyOffset)
            addSerialNumber(builder, serialNumber)
            addIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed)
            return endContract(builder)
        }
        fun startContract(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addSerialNumber(builder: FlatBufferBuilder, serialNumber: UShort) = builder.addShort(0, serialNumber.toShort(), 0)
        fun addPublicKey(builder: FlatBufferBuilder, publicKey: Int) = builder.addOffset(1, publicKey, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createPublicKeyVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startPublicKeyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addBots(builder: FlatBufferBuilder, bots: Int) = builder.addOffset(2, bots, 0)
        fun createBotsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startBotsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTerms(builder: FlatBufferBuilder, terms: Int) = builder.addOffset(3, terms, 0)
        fun addIsTemporaryUnlockAllowed(builder: FlatBufferBuilder, isTemporaryUnlockAllowed: Boolean) = builder.addBoolean(4, isTemporaryUnlockAllowed, false)
        fun endContract(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
