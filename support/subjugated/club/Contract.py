# automatically generated by the FlatBuffers compiler, do not modify

# namespace: club

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Contract(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Contract()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContract(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Contract
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Contract
    def PublicKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Contract
    def Capabilities(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Contract
    def CapabilitiesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Contract
    def CapabilitiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Contract
    def CapabilitiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Contract
    def IsPartial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Contract
    def CompleteContractAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Contract
    def IsUnremovable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Contract
    def IsBlind(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Contract
    def EncryptedContract(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Contract
    def EncryptedContractAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Contract
    def EncryptedContractLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Contract
    def EncryptedContractIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Contract
    def EndConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Contract
    def EndCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Contract
    def Participants(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from subjugated.club.WebHook import WebHook
            obj = WebHook()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Contract
    def ParticipantsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Contract
    def ParticipantsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Contract
    def IsLockOnAccept(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Contract
    def IsTemporaryUnlockAllowed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Contract
    def UnlockRules(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from subjugated.club.TemporaryUnlockRules import TemporaryUnlockRules
            obj = TemporaryUnlockRules()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ContractStart(builder):
    builder.StartObject(13)

def Start(builder):
    ContractStart(builder)

def ContractAddPublicKey(builder, publicKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(publicKey), 0)

def AddPublicKey(builder, publicKey):
    ContractAddPublicKey(builder, publicKey)

def ContractAddCapabilities(builder, capabilities):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(capabilities), 0)

def AddCapabilities(builder, capabilities):
    ContractAddCapabilities(builder, capabilities)

def ContractStartCapabilitiesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartCapabilitiesVector(builder, numElems):
    return ContractStartCapabilitiesVector(builder, numElems)

def ContractAddIsPartial(builder, isPartial):
    builder.PrependBoolSlot(2, isPartial, 0)

def AddIsPartial(builder, isPartial):
    ContractAddIsPartial(builder, isPartial)

def ContractAddCompleteContractAddress(builder, completeContractAddress):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(completeContractAddress), 0)

def AddCompleteContractAddress(builder, completeContractAddress):
    ContractAddCompleteContractAddress(builder, completeContractAddress)

def ContractAddIsUnremovable(builder, isUnremovable):
    builder.PrependBoolSlot(4, isUnremovable, 0)

def AddIsUnremovable(builder, isUnremovable):
    ContractAddIsUnremovable(builder, isUnremovable)

def ContractAddIsBlind(builder, isBlind):
    builder.PrependBoolSlot(5, isBlind, 0)

def AddIsBlind(builder, isBlind):
    ContractAddIsBlind(builder, isBlind)

def ContractAddEncryptedContract(builder, encryptedContract):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(encryptedContract), 0)

def AddEncryptedContract(builder, encryptedContract):
    ContractAddEncryptedContract(builder, encryptedContract)

def ContractStartEncryptedContractVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartEncryptedContractVector(builder, numElems):
    return ContractStartEncryptedContractVector(builder, numElems)

def ContractAddEndConditionType(builder, endConditionType):
    builder.PrependUint8Slot(7, endConditionType, 0)

def AddEndConditionType(builder, endConditionType):
    ContractAddEndConditionType(builder, endConditionType)

def ContractAddEndCondition(builder, endCondition):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(endCondition), 0)

def AddEndCondition(builder, endCondition):
    ContractAddEndCondition(builder, endCondition)

def ContractAddParticipants(builder, participants):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(participants), 0)

def AddParticipants(builder, participants):
    ContractAddParticipants(builder, participants)

def ContractStartParticipantsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartParticipantsVector(builder, numElems):
    return ContractStartParticipantsVector(builder, numElems)

def ContractAddIsLockOnAccept(builder, isLockOnAccept):
    builder.PrependBoolSlot(10, isLockOnAccept, 0)

def AddIsLockOnAccept(builder, isLockOnAccept):
    ContractAddIsLockOnAccept(builder, isLockOnAccept)

def ContractAddIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed):
    builder.PrependBoolSlot(11, isTemporaryUnlockAllowed, 0)

def AddIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed):
    ContractAddIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed)

def ContractAddUnlockRules(builder, unlockRules):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(unlockRules), 0)

def AddUnlockRules(builder, unlockRules):
    ContractAddUnlockRules(builder, unlockRules)

def ContractEnd(builder):
    return builder.EndObject()

def End(builder):
    return ContractEnd(builder)
