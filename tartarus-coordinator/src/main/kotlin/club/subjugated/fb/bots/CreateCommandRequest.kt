// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.bots

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class CreateCommandRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CreateCommandRequest {
        __init(_i, _bb)
        return this
    }
    fun commandBody(j: Int) : UByte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val commandBodyLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val commandBodyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun commandBodyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val shareableToken : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shareableTokenAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun shareableTokenInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val contractName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val contractNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun contractNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsCreateCommandRequest(_bb: ByteBuffer): CreateCommandRequest = getRootAsCreateCommandRequest(_bb, CreateCommandRequest())
        fun getRootAsCreateCommandRequest(_bb: ByteBuffer, obj: CreateCommandRequest): CreateCommandRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCreateCommandRequest(builder: FlatBufferBuilder, commandBodyOffset: Int, shareableTokenOffset: Int, contractNameOffset: Int) : Int {
            builder.startTable(3)
            addContractName(builder, contractNameOffset)
            addShareableToken(builder, shareableTokenOffset)
            addCommandBody(builder, commandBodyOffset)
            return endCreateCommandRequest(builder)
        }
        fun startCreateCommandRequest(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addCommandBody(builder: FlatBufferBuilder, commandBody: Int) = builder.addOffset(0, commandBody, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createCommandBodyVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startCommandBodyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addShareableToken(builder: FlatBufferBuilder, shareableToken: Int) = builder.addOffset(1, shareableToken, 0)
        fun addContractName(builder: FlatBufferBuilder, contractName: Int) = builder.addOffset(2, contractName, 0)
        fun endCreateCommandRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
