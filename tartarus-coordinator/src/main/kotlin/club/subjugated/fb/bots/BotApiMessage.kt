// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.bots

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class BotApiMessage : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : BotApiMessage {
        __init(_i, _bb)
        return this
    }
    val name : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val payloadType : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun payload(obj: Table) : Table? {
        val o = __offset(8); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    val requestId : Long
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsBotApiMessage(_bb: ByteBuffer): BotApiMessage = getRootAsBotApiMessage(_bb, BotApiMessage())
        fun getRootAsBotApiMessage(_bb: ByteBuffer, obj: BotApiMessage): BotApiMessage {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createBotApiMessage(builder: FlatBufferBuilder, nameOffset: Int, payloadType: UByte, payloadOffset: Int, requestId: Long) : Int {
            builder.startTable(4)
            addRequestId(builder, requestId)
            addPayload(builder, payloadOffset)
            addName(builder, nameOffset)
            addPayloadType(builder, payloadType)
            return endBotApiMessage(builder)
        }
        fun startBotApiMessage(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)
        fun addPayloadType(builder: FlatBufferBuilder, payloadType: UByte) = builder.addByte(1, payloadType.toByte(), 0)
        fun addPayload(builder: FlatBufferBuilder, payload: Int) = builder.addOffset(2, payload, 0)
        fun addRequestId(builder: FlatBufferBuilder, requestId: Long) = builder.addLong(3, requestId, 0L)
        fun endBotApiMessage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishBotApiMessageBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedBotApiMessageBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
