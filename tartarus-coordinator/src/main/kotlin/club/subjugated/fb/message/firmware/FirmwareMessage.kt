// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message.firmware

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class FirmwareMessage : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FirmwareMessage {
        __init(_i, _bb)
        return this
    }
    val payloadType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun payload(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    val requestId : Long
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val sessionToken : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sessionTokenAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun sessionTokenInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFirmwareMessage(_bb: ByteBuffer): FirmwareMessage = getRootAsFirmwareMessage(_bb, FirmwareMessage())
        fun getRootAsFirmwareMessage(_bb: ByteBuffer, obj: FirmwareMessage): FirmwareMessage {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFirmwareMessage(builder: FlatBufferBuilder, payloadType: UByte, payloadOffset: Int, requestId: Long, sessionTokenOffset: Int) : Int {
            builder.startTable(4)
            addRequestId(builder, requestId)
            addSessionToken(builder, sessionTokenOffset)
            addPayload(builder, payloadOffset)
            addPayloadType(builder, payloadType)
            return endFirmwareMessage(builder)
        }
        fun startFirmwareMessage(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addPayloadType(builder: FlatBufferBuilder, payloadType: UByte) = builder.addByte(0, payloadType.toByte(), 0)
        fun addPayload(builder: FlatBufferBuilder, payload: Int) = builder.addOffset(1, payload, 0)
        fun addRequestId(builder: FlatBufferBuilder, requestId: Long) = builder.addLong(2, requestId, 0L)
        fun addSessionToken(builder: FlatBufferBuilder, sessionToken: Int) = builder.addOffset(3, sessionToken, 0)
        fun endFirmwareMessage(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFirmwareMessageBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedFirmwareMessageBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
