// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message.firmware

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Version : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Version {
        __init(_i, _bb)
        return this
    }
    val name : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val major : UShort
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val minor : UShort
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val build : UShort
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    fun signature(j: Int) : UByte {
        val o = __offset(12)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val signatureLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    val signatureAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun signatureInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsVersion(_bb: ByteBuffer): Version = getRootAsVersion(_bb, Version())
        fun getRootAsVersion(_bb: ByteBuffer, obj: Version): Version {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createVersion(builder: FlatBufferBuilder, nameOffset: Int, major: UShort, minor: UShort, build: UShort, signatureOffset: Int) : Int {
            builder.startTable(5)
            addSignature(builder, signatureOffset)
            addName(builder, nameOffset)
            addBuild(builder, build)
            addMinor(builder, minor)
            addMajor(builder, major)
            return endVersion(builder)
        }
        fun startVersion(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)
        fun addMajor(builder: FlatBufferBuilder, major: UShort) = builder.addShort(1, major.toShort(), 0)
        fun addMinor(builder: FlatBufferBuilder, minor: UShort) = builder.addShort(2, minor.toShort(), 0)
        fun addBuild(builder: FlatBufferBuilder, build: UShort) = builder.addShort(3, build.toShort(), 0)
        fun addSignature(builder: FlatBufferBuilder, signature: Int) = builder.addOffset(4, signature, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createSignatureVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startSignatureVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun endVersion(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
