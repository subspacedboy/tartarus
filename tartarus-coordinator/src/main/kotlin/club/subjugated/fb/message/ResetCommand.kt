// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class ResetCommand : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ResetCommand {
        __init(_i, _bb)
        return this
    }
    val session : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sessionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun sessionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val serialNumber : UShort
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsResetCommand(_bb: ByteBuffer): ResetCommand = getRootAsResetCommand(_bb, ResetCommand())
        fun getRootAsResetCommand(_bb: ByteBuffer, obj: ResetCommand): ResetCommand {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createResetCommand(builder: FlatBufferBuilder, sessionOffset: Int, serialNumber: UShort) : Int {
            builder.startTable(2)
            addSession(builder, sessionOffset)
            addSerialNumber(builder, serialNumber)
            return endResetCommand(builder)
        }
        fun startResetCommand(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addSession(builder: FlatBufferBuilder, session: Int) = builder.addOffset(0, session, 0)
        fun addSerialNumber(builder: FlatBufferBuilder, serialNumber: UShort) = builder.addShort(1, serialNumber.toShort(), 0)
        fun endResetCommand(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
