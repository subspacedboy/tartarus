// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Command : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Command {
        __init(_i, _bb)
        return this
    }
    fun signedMessage(j: Int) : UByte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val signedMessageLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val signedMessageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun signedMessageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val commandType : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsCommand(_bb: ByteBuffer): Command = getRootAsCommand(_bb, Command())
        fun getRootAsCommand(_bb: ByteBuffer, obj: Command): Command {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCommand(builder: FlatBufferBuilder, signedMessageOffset: Int, commandType: Byte) : Int {
            builder.startTable(2)
            addSignedMessage(builder, signedMessageOffset)
            addCommandType(builder, commandType)
            return endCommand(builder)
        }
        fun startCommand(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addSignedMessage(builder: FlatBufferBuilder, signedMessage: Int) = builder.addOffset(0, signedMessage, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createSignedMessageVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startSignedMessageVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addCommandType(builder: FlatBufferBuilder, commandType: Byte) = builder.addByte(1, commandType, 0)
        fun endCommand(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
