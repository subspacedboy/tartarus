// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Bot : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Bot {
        __init(_i, _bb)
        return this
    }
    val name : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val permissions : club.subjugated.fb.message.Permission? get() = permissions(club.subjugated.fb.message.Permission())
    fun permissions(obj: club.subjugated.fb.message.Permission) : club.subjugated.fb.message.Permission? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsBot(_bb: ByteBuffer): Bot = getRootAsBot(_bb, Bot())
        fun getRootAsBot(_bb: ByteBuffer, obj: Bot): Bot {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createBot(builder: FlatBufferBuilder, nameOffset: Int, permissionsOffset: Int) : Int {
            builder.startTable(2)
            addPermissions(builder, permissionsOffset)
            addName(builder, nameOffset)
            return endBot(builder)
        }
        fun startBot(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)
        fun addPermissions(builder: FlatBufferBuilder, permissions: Int) = builder.addOffset(1, permissions, 0)
        fun endBot(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
