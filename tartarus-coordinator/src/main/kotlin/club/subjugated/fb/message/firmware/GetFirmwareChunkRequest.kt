// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message.firmware

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class GetFirmwareChunkRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GetFirmwareChunkRequest {
        __init(_i, _bb)
        return this
    }
    val firmwareName : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val firmwareNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun firmwareNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val offset : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val size : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsGetFirmwareChunkRequest(_bb: ByteBuffer): GetFirmwareChunkRequest = getRootAsGetFirmwareChunkRequest(_bb, GetFirmwareChunkRequest())
        fun getRootAsGetFirmwareChunkRequest(_bb: ByteBuffer, obj: GetFirmwareChunkRequest): GetFirmwareChunkRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createGetFirmwareChunkRequest(builder: FlatBufferBuilder, firmware_name_offset: Int, offset: Int, size: Int) : Int {
            builder.startTable(3)
            addSize(builder, size)
            addOffset(builder, offset)
            addFirmwareName(builder, firmware_name_offset)
            return endGetFirmwareChunkRequest(builder)
        }
        fun startGetFirmwareChunkRequest(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addFirmwareName(builder: FlatBufferBuilder, firmwareName: Int) = builder.addOffset(0, firmwareName, 0)
        fun addOffset(builder: FlatBufferBuilder, offset: Int) = builder.addInt(1, offset, 0)
        fun addSize(builder: FlatBufferBuilder, size: Int) = builder.addInt(2, size, 0)
        fun endGetFirmwareChunkRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
