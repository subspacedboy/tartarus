// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class StartedUpdate : Table() {

    fun __init(_i: Int, _bb: ByteBuffer) {
        __reset(_i, _bb)
    }

    fun __assign(_i: Int, _bb: ByteBuffer): StartedUpdate {
        __init(_i, _bb)
        return this
    }

    fun publicKey(j: Int): UByte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }

    val publicKeyLength: Int
        get() {
            val o = __offset(4)
            return if (o != 0) __vector_len(o) else 0
        }

    val publicKeyAsByteBuffer: ByteBuffer
        get() = __vector_as_bytebuffer(4, 1)

    fun publicKeyInByteBuffer(_bb: ByteBuffer): ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)

    val session: String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }

    val sessionAsByteBuffer: ByteBuffer
        get() = __vector_as_bytebuffer(6, 1)

    fun sessionInByteBuffer(_bb: ByteBuffer): ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)

    val startedWithLocalContract: Boolean
        get() {
            val o = __offset(8)
            return if (o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }

    val currentContractSerial: UShort
        get() {
            val o = __offset(10)
            return if (o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }

    val isLocked: Boolean
        get() {
            val o = __offset(12)
            return if (o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }

    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()

        fun getRootAsStartedUpdate(_bb: ByteBuffer): StartedUpdate =
            getRootAsStartedUpdate(_bb, StartedUpdate())

        fun getRootAsStartedUpdate(_bb: ByteBuffer, obj: StartedUpdate): StartedUpdate {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }

        fun createStartedUpdate(
            builder: FlatBufferBuilder,
            publicKeyOffset: Int,
            sessionOffset: Int,
            startedWithLocalContract: Boolean,
            currentContractSerial: UShort,
            isLocked: Boolean,
        ): Int {
            builder.startTable(5)
            addSession(builder, sessionOffset)
            addPublicKey(builder, publicKeyOffset)
            addCurrentContractSerial(builder, currentContractSerial)
            addIsLocked(builder, isLocked)
            addStartedWithLocalContract(builder, startedWithLocalContract)
            return endStartedUpdate(builder)
        }

        fun startStartedUpdate(builder: FlatBufferBuilder) = builder.startTable(5)

        fun addPublicKey(builder: FlatBufferBuilder, publicKey: Int) =
            builder.addOffset(0, publicKey, 0)

        @kotlin.ExperimentalUnsignedTypes
        fun createPublicKeyVector(builder: FlatBufferBuilder, data: UByteArray): Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }

        fun startPublicKeyVector(builder: FlatBufferBuilder, numElems: Int) =
            builder.startVector(1, numElems, 1)

        fun addSession(builder: FlatBufferBuilder, session: Int) = builder.addOffset(1, session, 0)

        fun addStartedWithLocalContract(
            builder: FlatBufferBuilder,
            startedWithLocalContract: Boolean,
        ) = builder.addBoolean(2, startedWithLocalContract, false)

        fun addCurrentContractSerial(builder: FlatBufferBuilder, currentContractSerial: UShort) =
            builder.addShort(3, currentContractSerial.toShort(), 0)

        fun addIsLocked(builder: FlatBufferBuilder, isLocked: Boolean) =
            builder.addBoolean(4, isLocked, false)

        fun endStartedUpdate(builder: FlatBufferBuilder): Int {
            val o = builder.endTable()
            return o
        }
    }
}
