// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Error : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Error {
        __init(_i, _bb)
        return this
    }
    fun publicKey(j: Int) : UByte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val publicKeyLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val publicKeyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun publicKeyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val session : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sessionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun sessionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val serialNumber : UShort
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val counter : UShort
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val message : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val messageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun messageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsError(_bb: ByteBuffer): Error = getRootAsError(_bb, Error())
        fun getRootAsError(_bb: ByteBuffer, obj: Error): Error {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createError(builder: FlatBufferBuilder, publicKeyOffset: Int, sessionOffset: Int, serialNumber: UShort, counter: UShort, messageOffset: Int) : Int {
            builder.startTable(5)
            addMessage(builder, messageOffset)
            addSession(builder, sessionOffset)
            addPublicKey(builder, publicKeyOffset)
            addCounter(builder, counter)
            addSerialNumber(builder, serialNumber)
            return endError(builder)
        }
        fun startError(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addPublicKey(builder: FlatBufferBuilder, publicKey: Int) = builder.addOffset(0, publicKey, 0)
        @kotlin.ExperimentalUnsignedTypes
        fun createPublicKeyVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startPublicKeyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addSession(builder: FlatBufferBuilder, session: Int) = builder.addOffset(1, session, 0)
        fun addSerialNumber(builder: FlatBufferBuilder, serialNumber: UShort) = builder.addShort(2, serialNumber.toShort(), 0)
        fun addCounter(builder: FlatBufferBuilder, counter: UShort) = builder.addShort(3, counter.toShort(), 0)
        fun addMessage(builder: FlatBufferBuilder, message: Int) = builder.addOffset(4, message, 0)
        fun endError(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
