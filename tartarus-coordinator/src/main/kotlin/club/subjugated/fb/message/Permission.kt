// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Permission : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Permission {
        __init(_i, _bb)
        return this
    }
    val receiveEvents : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val canUnlock : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val canRelease : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPermission(_bb: ByteBuffer): Permission = getRootAsPermission(_bb, Permission())
        fun getRootAsPermission(_bb: ByteBuffer, obj: Permission): Permission {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPermission(builder: FlatBufferBuilder, receiveEvents: Boolean, canUnlock: Boolean, canRelease: Boolean) : Int {
            builder.startTable(3)
            addCanRelease(builder, canRelease)
            addCanUnlock(builder, canUnlock)
            addReceiveEvents(builder, receiveEvents)
            return endPermission(builder)
        }
        fun startPermission(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addReceiveEvents(builder: FlatBufferBuilder, receiveEvents: Boolean) = builder.addBoolean(0, receiveEvents, false)
        fun addCanUnlock(builder: FlatBufferBuilder, canUnlock: Boolean) = builder.addBoolean(1, canUnlock, false)
        fun addCanRelease(builder: FlatBufferBuilder, canRelease: Boolean) = builder.addBoolean(2, canRelease, false)
        fun endPermission(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
