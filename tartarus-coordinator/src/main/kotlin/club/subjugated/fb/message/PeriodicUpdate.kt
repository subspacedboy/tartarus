// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class PeriodicUpdate : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PeriodicUpdate {
        __init(_i, _bb)
        return this
    }
    val session : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sessionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun sessionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val isLocked : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val currentContractSerial : UShort
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getShort(o + bb_pos).toUShort() else 0u
        }
    val localUnlock : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val localLock : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPeriodicUpdate(_bb: ByteBuffer): PeriodicUpdate = getRootAsPeriodicUpdate(_bb, PeriodicUpdate())
        fun getRootAsPeriodicUpdate(_bb: ByteBuffer, obj: PeriodicUpdate): PeriodicUpdate {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPeriodicUpdate(builder: FlatBufferBuilder, session_offset: Int, isLocked: Boolean, currentContractSerial: UShort, localUnlock: Boolean, localLock: Boolean) : Int {
            builder.startTable(5)
            addSession(builder, session_offset)
            addCurrentContractSerial(builder, currentContractSerial)
            addLocalLock(builder, localLock)
            addLocalUnlock(builder, localUnlock)
            addIsLocked(builder, isLocked)
            return endPeriodicUpdate(builder)
        }
        fun startPeriodicUpdate(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addSession(builder: FlatBufferBuilder, session: Int) = builder.addOffset(0, session, 0)
        fun addIsLocked(builder: FlatBufferBuilder, isLocked: Boolean) = builder.addBoolean(1, isLocked, false)
        fun addCurrentContractSerial(builder: FlatBufferBuilder, currentContractSerial: UShort) = builder.addShort(2, currentContractSerial.toShort(), 0)
        fun addLocalUnlock(builder: FlatBufferBuilder, localUnlock: Boolean) = builder.addBoolean(3, localUnlock, false)
        fun addLocalLock(builder: FlatBufferBuilder, localLock: Boolean) = builder.addBoolean(4, localLock, false)
        fun endPeriodicUpdate(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
