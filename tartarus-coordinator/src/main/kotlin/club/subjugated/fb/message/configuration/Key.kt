// automatically generated by the FlatBuffers compiler, do not modify

package club.subjugated.fb.message.configuration

import com.google.flatbuffers.Constants
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.Table
import java.nio.ByteBuffer
import java.nio.ByteOrder

@Suppress("unused")
class Key : Table() {

    fun __init(_i: Int, _bb: ByteBuffer) {
        __reset(_i, _bb)
    }

    fun __assign(_i: Int, _bb: ByteBuffer): Key {
        __init(_i, _bb)
        return this
    }

    val name: String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }

    val nameAsByteBuffer: ByteBuffer
        get() = __vector_as_bytebuffer(4, 1)

    fun nameInByteBuffer(_bb: ByteBuffer): ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)

    fun publicKey(j: Int): UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }

    val publicKeyLength: Int
        get() {
            val o = __offset(6)
            return if (o != 0) __vector_len(o) else 0
        }

    val publicKeyAsByteBuffer: ByteBuffer
        get() = __vector_as_bytebuffer(6, 1)

    fun publicKeyInByteBuffer(_bb: ByteBuffer): ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)

    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()

        fun getRootAsKey(_bb: ByteBuffer): Key = getRootAsKey(_bb, Key())

        fun getRootAsKey(_bb: ByteBuffer, obj: Key): Key {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }

        fun createKey(builder: FlatBufferBuilder, nameOffset: Int, publicKeyOffset: Int): Int {
            builder.startTable(2)
            addPublicKey(builder, publicKeyOffset)
            addName(builder, nameOffset)
            return endKey(builder)
        }

        fun startKey(builder: FlatBufferBuilder) = builder.startTable(2)

        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)

        fun addPublicKey(builder: FlatBufferBuilder, publicKey: Int) =
            builder.addOffset(1, publicKey, 0)

        @kotlin.ExperimentalUnsignedTypes
        fun createPublicKeyVector(builder: FlatBufferBuilder, data: UByteArray): Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }

        fun startPublicKeyVector(builder: FlatBufferBuilder, numElems: Int) =
            builder.startVector(1, numElems, 1)

        fun endKey(builder: FlatBufferBuilder): Int {
            val o = builder.endTable()
            return o
        }
    }
}
