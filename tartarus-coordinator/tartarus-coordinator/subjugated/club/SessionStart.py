# automatically generated by the FlatBuffers compiler, do not modify

# namespace: club

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SessionStart(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SessionStart()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSessionStart(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SessionStart
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SessionStart
    def PublicKey(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SessionStart
    def PublicKeyAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SessionStart
    def PublicKeyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SessionStart
    def PublicKeyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SessionStart
    def SessionToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SessionStartStart(builder):
    builder.StartObject(2)

def Start(builder):
    SessionStartStart(builder)

def SessionStartAddPublicKey(builder, publicKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(publicKey), 0)

def AddPublicKey(builder, publicKey):
    SessionStartAddPublicKey(builder, publicKey)

def SessionStartStartPublicKeyVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartPublicKeyVector(builder, numElems):
    return SessionStartStartPublicKeyVector(builder, numElems)

def SessionStartAddSessionToken(builder, sessionToken):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sessionToken), 0)

def AddSessionToken(builder, sessionToken):
    SessionStartAddSessionToken(builder, sessionToken)

def SessionStartEnd(builder):
    return builder.EndObject()

def End(builder):
    return SessionStartEnd(builder)
