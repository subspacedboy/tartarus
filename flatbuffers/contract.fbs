namespace club.subjugated.fb.message;

table Permission {
  receive_events: bool;
  can_unlock: bool;
  can_lock: bool;
  can_release: bool;
}

table Bot {
  name: string;
  public_key: [ubyte];
  permissions: Permission;
}

table Contract {
  serial_number: ushort;
  public_key: [ubyte];
  bots: [Bot];
  terms: string;
  // If true, subject can freely cycle the lock.
  is_temporary_unlock_allowed: bool;
}

table StartedUpdate {
    public_key: [ubyte];
    session: string;

    started_with_local_contract: bool;

    current_contract_serial: ushort;
    is_locked: bool;
}

table PeriodicUpdate {
  session: string;
  is_locked: bool;
  current_contract_serial: ushort;

  local_unlock: bool;
  local_lock: bool;
}

table Acknowledgement {
    public_key: [ubyte];
    session: string;

    serial_number: ushort;
    counter: ushort;
}

table Error {
    public_key: [ubyte];
    session: string;

    serial_number: ushort;
    counter: ushort;

    message: string;
}

table LockCommand {
    contract_serial_number: ushort;
    serial_number: ushort;
    counter: ushort;
}
table UnlockCommand {
    contract_serial_number: ushort;
    serial_number: ushort;
    counter: ushort;
}
table ReleaseCommand {
    contract_serial_number: ushort;
    serial_number: ushort;
    counter: ushort;
}
table AbortCommand {
    contract_serial_number: ushort;
    serial_number: ushort;
    counter: ushort;
}
table ResetCommand {
    session: string;
    serial_number: ushort;
}

union MessagePayload {
  Contract,
  LockCommand,
  UnlockCommand,
  ReleaseCommand,
  StartedUpdate,
  PeriodicUpdate,
  Acknowledgement,
  Error,
  AbortCommand,
  ResetCommand
}

table SignedMessage {
  signature: [ubyte];
  payload: MessagePayload;
  // Optional: Only used when a non-default authority signs the message.
  // For instance bots sending commands or a safety key being used.
  authority_identifier: string;
}

root_type SignedMessage;