// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ResetCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResetCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResetCommand(bb:flatbuffers.ByteBuffer, obj?:ResetCommand):ResetCommand {
  return (obj || new ResetCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResetCommand(bb:flatbuffers.ByteBuffer, obj?:ResetCommand):ResetCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResetCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

session():string|null
session(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
session(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

serialNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startResetCommand(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSession(builder:flatbuffers.Builder, sessionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, sessionOffset, 0);
}

static addSerialNumber(builder:flatbuffers.Builder, serialNumber:number) {
  builder.addFieldInt16(1, serialNumber, 0);
}

static endResetCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResetCommand(builder:flatbuffers.Builder, sessionOffset:flatbuffers.Offset, serialNumber:number):flatbuffers.Offset {
  ResetCommand.startResetCommand(builder);
  ResetCommand.addSession(builder, sessionOffset);
  ResetCommand.addSerialNumber(builder, serialNumber);
  return ResetCommand.endResetCommand(builder);
}
}
