// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Permission {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Permission {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPermission(bb:flatbuffers.ByteBuffer, obj?:Permission):Permission {
  return (obj || new Permission()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPermission(bb:flatbuffers.ByteBuffer, obj?:Permission):Permission {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Permission()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

receiveEvents():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canUnlock():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canLock():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

canRelease():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startPermission(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addReceiveEvents(builder:flatbuffers.Builder, receiveEvents:boolean) {
  builder.addFieldInt8(0, +receiveEvents, +false);
}

static addCanUnlock(builder:flatbuffers.Builder, canUnlock:boolean) {
  builder.addFieldInt8(1, +canUnlock, +false);
}

static addCanLock(builder:flatbuffers.Builder, canLock:boolean) {
  builder.addFieldInt8(2, +canLock, +false);
}

static addCanRelease(builder:flatbuffers.Builder, canRelease:boolean) {
  builder.addFieldInt8(3, +canRelease, +false);
}

static endPermission(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPermission(builder:flatbuffers.Builder, receiveEvents:boolean, canUnlock:boolean, canLock:boolean, canRelease:boolean):flatbuffers.Offset {
  Permission.startPermission(builder);
  Permission.addReceiveEvents(builder, receiveEvents);
  Permission.addCanUnlock(builder, canUnlock);
  Permission.addCanLock(builder, canLock);
  Permission.addCanRelease(builder, canRelease);
  return Permission.endPermission(builder);
}
}
