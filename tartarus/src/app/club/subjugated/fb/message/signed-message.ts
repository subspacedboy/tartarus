// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MessagePayload, unionToMessagePayload, unionListToMessagePayload } from '../../../../club/subjugated/fb/message/message-payload.js';


export class SignedMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignedMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignedMessage(bb:flatbuffers.ByteBuffer, obj?:SignedMessage):SignedMessage {
  return (obj || new SignedMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignedMessage(bb:flatbuffers.ByteBuffer, obj?:SignedMessage):SignedMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignedMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

signature(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

signatureLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signatureArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

payloadType():MessagePayload {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MessagePayload.NONE;
}

payload<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startSignedMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSignature(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, signatureOffset, 0);
}

static createSignatureVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSignatureVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addPayloadType(builder:flatbuffers.Builder, payloadType:MessagePayload) {
  builder.addFieldInt8(1, payloadType, MessagePayload.NONE);
}

static addPayload(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, payloadOffset, 0);
}

static endSignedMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSignedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedSignedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createSignedMessage(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset, payloadType:MessagePayload, payloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  SignedMessage.startSignedMessage(builder);
  SignedMessage.addSignature(builder, signatureOffset);
  SignedMessage.addPayloadType(builder, payloadType);
  SignedMessage.addPayload(builder, payloadOffset);
  return SignedMessage.endSignedMessage(builder);
}
}
