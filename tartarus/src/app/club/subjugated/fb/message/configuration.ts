// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Configuration {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Configuration {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConfiguration(bb:flatbuffers.ByteBuffer, obj?:Configuration):Configuration {
  return (obj || new Configuration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConfiguration(bb:flatbuffers.ByteBuffer, obj?:Configuration):Configuration {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Configuration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

coordinatorAddress():string|null
coordinatorAddress(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
coordinatorAddress(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

safetyKey(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

safetyKeyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

safetyKeyArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startConfiguration(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCoordinatorAddress(builder:flatbuffers.Builder, coordinatorAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, coordinatorAddressOffset, 0);
}

static addSafetyKey(builder:flatbuffers.Builder, safetyKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, safetyKeyOffset, 0);
}

static createSafetyKeyVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSafetyKeyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endConfiguration(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConfiguration(builder:flatbuffers.Builder, coordinatorAddressOffset:flatbuffers.Offset, safetyKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Configuration.startConfiguration(builder);
  Configuration.addCoordinatorAddress(builder, coordinatorAddressOffset);
  Configuration.addSafetyKey(builder, safetyKeyOffset);
  return Configuration.endConfiguration(builder);
}
}
