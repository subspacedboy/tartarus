// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Bot } from '../../../../club/subjugated/fb/message/bot.js';


export class Contract {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Contract {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContract(bb:flatbuffers.ByteBuffer, obj?:Contract):Contract {
  return (obj || new Contract()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContract(bb:flatbuffers.ByteBuffer, obj?:Contract):Contract {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Contract()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

serialNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

publicKey(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

publicKeyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

publicKeyArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

bots(index: number, obj?:Bot):Bot|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Bot()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

botsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

terms():string|null
terms(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
terms(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isTemporaryUnlockAllowed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startContract(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addSerialNumber(builder:flatbuffers.Builder, serialNumber:number) {
  builder.addFieldInt16(0, serialNumber, 0);
}

static addPublicKey(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, publicKeyOffset, 0);
}

static createPublicKeyVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPublicKeyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addBots(builder:flatbuffers.Builder, botsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, botsOffset, 0);
}

static createBotsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBotsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTerms(builder:flatbuffers.Builder, termsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, termsOffset, 0);
}

static addIsTemporaryUnlockAllowed(builder:flatbuffers.Builder, isTemporaryUnlockAllowed:boolean) {
  builder.addFieldInt8(4, +isTemporaryUnlockAllowed, +false);
}

static endContract(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createContract(builder:flatbuffers.Builder, serialNumber:number, publicKeyOffset:flatbuffers.Offset, botsOffset:flatbuffers.Offset, termsOffset:flatbuffers.Offset, isTemporaryUnlockAllowed:boolean):flatbuffers.Offset {
  Contract.startContract(builder);
  Contract.addSerialNumber(builder, serialNumber);
  Contract.addPublicKey(builder, publicKeyOffset);
  Contract.addBots(builder, botsOffset);
  Contract.addTerms(builder, termsOffset);
  Contract.addIsTemporaryUnlockAllowed(builder, isTemporaryUnlockAllowed);
  return Contract.endContract(builder);
}
}
