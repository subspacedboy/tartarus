// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Key } from '../../../../../club/subjugated/fb/message/configuration/key.js';


export class CoordinatorConfiguration {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CoordinatorConfiguration {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCoordinatorConfiguration(bb:flatbuffers.ByteBuffer, obj?:CoordinatorConfiguration):CoordinatorConfiguration {
  return (obj || new CoordinatorConfiguration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCoordinatorConfiguration(bb:flatbuffers.ByteBuffer, obj?:CoordinatorConfiguration):CoordinatorConfiguration {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CoordinatorConfiguration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

webUri():string|null
webUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
webUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

wsUri():string|null
wsUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
wsUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

mqttUri():string|null
mqttUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mqttUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

apiUri():string|null
apiUri(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
apiUri(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

safetyKeys(index: number, obj?:Key):Key|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Key()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

safetyKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

enableResetCommand():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

disableSafetyKeys():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

enableAuxiliarySafetyKeys():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

auxiliarySafetyKeys(index: number, obj?:Key):Key|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new Key()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

auxiliarySafetyKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

loginTokenPublicKey(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

loginTokenPublicKeyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

loginTokenPublicKeyArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startCoordinatorConfiguration(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addWebUri(builder:flatbuffers.Builder, webUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, webUriOffset, 0);
}

static addWsUri(builder:flatbuffers.Builder, wsUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, wsUriOffset, 0);
}

static addMqttUri(builder:flatbuffers.Builder, mqttUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, mqttUriOffset, 0);
}

static addApiUri(builder:flatbuffers.Builder, apiUriOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, apiUriOffset, 0);
}

static addSafetyKeys(builder:flatbuffers.Builder, safetyKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, safetyKeysOffset, 0);
}

static createSafetyKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSafetyKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEnableResetCommand(builder:flatbuffers.Builder, enableResetCommand:boolean) {
  builder.addFieldInt8(5, +enableResetCommand, +false);
}

static addDisableSafetyKeys(builder:flatbuffers.Builder, disableSafetyKeys:boolean) {
  builder.addFieldInt8(6, +disableSafetyKeys, +false);
}

static addEnableAuxiliarySafetyKeys(builder:flatbuffers.Builder, enableAuxiliarySafetyKeys:boolean) {
  builder.addFieldInt8(7, +enableAuxiliarySafetyKeys, +false);
}

static addAuxiliarySafetyKeys(builder:flatbuffers.Builder, auxiliarySafetyKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, auxiliarySafetyKeysOffset, 0);
}

static createAuxiliarySafetyKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAuxiliarySafetyKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLoginTokenPublicKey(builder:flatbuffers.Builder, loginTokenPublicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, loginTokenPublicKeyOffset, 0);
}

static createLoginTokenPublicKeyVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createLoginTokenPublicKeyVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createLoginTokenPublicKeyVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startLoginTokenPublicKeyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endCoordinatorConfiguration(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCoordinatorConfigurationBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedCoordinatorConfigurationBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createCoordinatorConfiguration(builder:flatbuffers.Builder, webUriOffset:flatbuffers.Offset, wsUriOffset:flatbuffers.Offset, mqttUriOffset:flatbuffers.Offset, apiUriOffset:flatbuffers.Offset, safetyKeysOffset:flatbuffers.Offset, enableResetCommand:boolean, disableSafetyKeys:boolean, enableAuxiliarySafetyKeys:boolean, auxiliarySafetyKeysOffset:flatbuffers.Offset, loginTokenPublicKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  CoordinatorConfiguration.startCoordinatorConfiguration(builder);
  CoordinatorConfiguration.addWebUri(builder, webUriOffset);
  CoordinatorConfiguration.addWsUri(builder, wsUriOffset);
  CoordinatorConfiguration.addMqttUri(builder, mqttUriOffset);
  CoordinatorConfiguration.addApiUri(builder, apiUriOffset);
  CoordinatorConfiguration.addSafetyKeys(builder, safetyKeysOffset);
  CoordinatorConfiguration.addEnableResetCommand(builder, enableResetCommand);
  CoordinatorConfiguration.addDisableSafetyKeys(builder, disableSafetyKeys);
  CoordinatorConfiguration.addEnableAuxiliarySafetyKeys(builder, enableAuxiliarySafetyKeys);
  CoordinatorConfiguration.addAuxiliarySafetyKeys(builder, auxiliarySafetyKeysOffset);
  CoordinatorConfiguration.addLoginTokenPublicKey(builder, loginTokenPublicKeyOffset);
  return CoordinatorConfiguration.endCoordinatorConfiguration(builder);
}
}
