// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetLatestFirmwareResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetLatestFirmwareResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetLatestFirmwareResponse(bb:flatbuffers.ByteBuffer, obj?:GetLatestFirmwareResponse):GetLatestFirmwareResponse {
  return (obj || new GetLatestFirmwareResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetLatestFirmwareResponse(bb:flatbuffers.ByteBuffer, obj?:GetLatestFirmwareResponse):GetLatestFirmwareResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetLatestFirmwareResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

digest(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

digestLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

digestArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

firmwareName():string|null
firmwareName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firmwareName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

versionName():string|null
versionName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
versionName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startGetLatestFirmwareResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDigest(builder:flatbuffers.Builder, digestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, digestOffset, 0);
}

static createDigestVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDigestVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addFirmwareName(builder:flatbuffers.Builder, firmwareNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, firmwareNameOffset, 0);
}

static addVersionName(builder:flatbuffers.Builder, versionNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, versionNameOffset, 0);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldInt32(3, size, 0);
}

static endGetLatestFirmwareResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetLatestFirmwareResponse(builder:flatbuffers.Builder, digestOffset:flatbuffers.Offset, firmwareNameOffset:flatbuffers.Offset, versionNameOffset:flatbuffers.Offset, size:number):flatbuffers.Offset {
  GetLatestFirmwareResponse.startGetLatestFirmwareResponse(builder);
  GetLatestFirmwareResponse.addDigest(builder, digestOffset);
  GetLatestFirmwareResponse.addFirmwareName(builder, firmwareNameOffset);
  GetLatestFirmwareResponse.addVersionName(builder, versionNameOffset);
  GetLatestFirmwareResponse.addSize(builder, size);
  return GetLatestFirmwareResponse.endGetLatestFirmwareResponse(builder);
}
}
