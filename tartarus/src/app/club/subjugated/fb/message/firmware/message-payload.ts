// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { FirmwareChallengeRequest } from '../../../../../club/subjugated/fb/message/firmware/firmware-challenge-request.js';
import { FirmwareChallengeResponse } from '../../../../../club/subjugated/fb/message/firmware/firmware-challenge-response.js';
import { GetFirmwareChunkRequest } from '../../../../../club/subjugated/fb/message/firmware/get-firmware-chunk-request.js';
import { GetFirmwareChunkResponse } from '../../../../../club/subjugated/fb/message/firmware/get-firmware-chunk-response.js';
import { GetLatestFirmwareRequest } from '../../../../../club/subjugated/fb/message/firmware/get-latest-firmware-request.js';
import { GetLatestFirmwareResponse } from '../../../../../club/subjugated/fb/message/firmware/get-latest-firmware-response.js';


export enum MessagePayload {
  NONE = 0,
  FirmwareChallengeRequest = 1,
  FirmwareChallengeResponse = 2,
  GetLatestFirmwareRequest = 3,
  GetLatestFirmwareResponse = 4,
  GetFirmwareChunkRequest = 5,
  GetFirmwareChunkResponse = 6
}

export function unionToMessagePayload(
  type: MessagePayload,
  accessor: (obj:FirmwareChallengeRequest|FirmwareChallengeResponse|GetFirmwareChunkRequest|GetFirmwareChunkResponse|GetLatestFirmwareRequest|GetLatestFirmwareResponse) => FirmwareChallengeRequest|FirmwareChallengeResponse|GetFirmwareChunkRequest|GetFirmwareChunkResponse|GetLatestFirmwareRequest|GetLatestFirmwareResponse|null
): FirmwareChallengeRequest|FirmwareChallengeResponse|GetFirmwareChunkRequest|GetFirmwareChunkResponse|GetLatestFirmwareRequest|GetLatestFirmwareResponse|null {
  switch(MessagePayload[type]) {
    case 'NONE': return null; 
    case 'FirmwareChallengeRequest': return accessor(new FirmwareChallengeRequest())! as FirmwareChallengeRequest;
    case 'FirmwareChallengeResponse': return accessor(new FirmwareChallengeResponse())! as FirmwareChallengeResponse;
    case 'GetLatestFirmwareRequest': return accessor(new GetLatestFirmwareRequest())! as GetLatestFirmwareRequest;
    case 'GetLatestFirmwareResponse': return accessor(new GetLatestFirmwareResponse())! as GetLatestFirmwareResponse;
    case 'GetFirmwareChunkRequest': return accessor(new GetFirmwareChunkRequest())! as GetFirmwareChunkRequest;
    case 'GetFirmwareChunkResponse': return accessor(new GetFirmwareChunkResponse())! as GetFirmwareChunkResponse;
    default: return null;
  }
}

export function unionListToMessagePayload(
  type: MessagePayload, 
  accessor: (index: number, obj:FirmwareChallengeRequest|FirmwareChallengeResponse|GetFirmwareChunkRequest|GetFirmwareChunkResponse|GetLatestFirmwareRequest|GetLatestFirmwareResponse) => FirmwareChallengeRequest|FirmwareChallengeResponse|GetFirmwareChunkRequest|GetFirmwareChunkResponse|GetLatestFirmwareRequest|GetLatestFirmwareResponse|null, 
  index: number
): FirmwareChallengeRequest|FirmwareChallengeResponse|GetFirmwareChunkRequest|GetFirmwareChunkResponse|GetLatestFirmwareRequest|GetLatestFirmwareResponse|null {
  switch(MessagePayload[type]) {
    case 'NONE': return null; 
    case 'FirmwareChallengeRequest': return accessor(index, new FirmwareChallengeRequest())! as FirmwareChallengeRequest;
    case 'FirmwareChallengeResponse': return accessor(index, new FirmwareChallengeResponse())! as FirmwareChallengeResponse;
    case 'GetLatestFirmwareRequest': return accessor(index, new GetLatestFirmwareRequest())! as GetLatestFirmwareRequest;
    case 'GetLatestFirmwareResponse': return accessor(index, new GetLatestFirmwareResponse())! as GetLatestFirmwareResponse;
    case 'GetFirmwareChunkRequest': return accessor(index, new GetFirmwareChunkRequest())! as GetFirmwareChunkRequest;
    case 'GetFirmwareChunkResponse': return accessor(index, new GetFirmwareChunkResponse())! as GetFirmwareChunkResponse;
    default: return null;
  }
}
