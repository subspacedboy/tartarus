// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetFirmwareChunkResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFirmwareChunkResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFirmwareChunkResponse(bb:flatbuffers.ByteBuffer, obj?:GetFirmwareChunkResponse):GetFirmwareChunkResponse {
  return (obj || new GetFirmwareChunkResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFirmwareChunkResponse(bb:flatbuffers.ByteBuffer, obj?:GetFirmwareChunkResponse):GetFirmwareChunkResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFirmwareChunkResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

chunk(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

chunkLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

chunkArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetFirmwareChunkResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldInt32(0, size, 0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldInt32(1, offset, 0);
}

static addChunk(builder:flatbuffers.Builder, chunkOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, chunkOffset, 0);
}

static createChunkVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startChunkVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetFirmwareChunkResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetFirmwareChunkResponse(builder:flatbuffers.Builder, size:number, offset:number, chunkOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetFirmwareChunkResponse.startGetFirmwareChunkResponse(builder);
  GetFirmwareChunkResponse.addSize(builder, size);
  GetFirmwareChunkResponse.addOffset(builder, offset);
  GetFirmwareChunkResponse.addChunk(builder, chunkOffset);
  return GetFirmwareChunkResponse.endGetFirmwareChunkResponse(builder);
}
}
