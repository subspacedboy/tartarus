// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetFirmwareChunkRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetFirmwareChunkRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetFirmwareChunkRequest(bb:flatbuffers.ByteBuffer, obj?:GetFirmwareChunkRequest):GetFirmwareChunkRequest {
  return (obj || new GetFirmwareChunkRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetFirmwareChunkRequest(bb:flatbuffers.ByteBuffer, obj?:GetFirmwareChunkRequest):GetFirmwareChunkRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetFirmwareChunkRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

firmwareName():string|null
firmwareName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
firmwareName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

size():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startGetFirmwareChunkRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFirmwareName(builder:flatbuffers.Builder, firmwareNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, firmwareNameOffset, 0);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldInt32(1, offset, 0);
}

static addSize(builder:flatbuffers.Builder, size:number) {
  builder.addFieldInt32(2, size, 0);
}

static endGetFirmwareChunkRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetFirmwareChunkRequest(builder:flatbuffers.Builder, firmwareNameOffset:flatbuffers.Offset, offset:number, size:number):flatbuffers.Offset {
  GetFirmwareChunkRequest.startGetFirmwareChunkRequest(builder);
  GetFirmwareChunkRequest.addFirmwareName(builder, firmwareNameOffset);
  GetFirmwareChunkRequest.addOffset(builder, offset);
  GetFirmwareChunkRequest.addSize(builder, size);
  return GetFirmwareChunkRequest.endGetFirmwareChunkRequest(builder);
}
}
