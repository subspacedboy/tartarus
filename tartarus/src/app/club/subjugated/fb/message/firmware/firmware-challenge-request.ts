// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Version } from '../../../../../club/subjugated/fb/message/firmware/version.js';


export class FirmwareChallengeRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FirmwareChallengeRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFirmwareChallengeRequest(bb:flatbuffers.ByteBuffer, obj?:FirmwareChallengeRequest):FirmwareChallengeRequest {
  return (obj || new FirmwareChallengeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFirmwareChallengeRequest(bb:flatbuffers.ByteBuffer, obj?:FirmwareChallengeRequest):FirmwareChallengeRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FirmwareChallengeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

nonce(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

nonceLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

nonceArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

latest(obj?:Version):Version|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Version()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFirmwareChallengeRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addNonce(builder:flatbuffers.Builder, nonceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nonceOffset, 0);
}

static createNonceVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startNonceVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addLatest(builder:flatbuffers.Builder, latestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, latestOffset, 0);
}

static endFirmwareChallengeRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
