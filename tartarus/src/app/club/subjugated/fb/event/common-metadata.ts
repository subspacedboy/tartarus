// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class CommonMetadata {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CommonMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCommonMetadata(bb:flatbuffers.ByteBuffer, obj?:CommonMetadata):CommonMetadata {
  return (obj || new CommonMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCommonMetadata(bb:flatbuffers.ByteBuffer, obj?:CommonMetadata):CommonMetadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CommonMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

lockSession():string|null
lockSession(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lockSession(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

contractSerialNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

serialNumber():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

counter():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startCommonMetadata(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLockSession(builder:flatbuffers.Builder, lockSessionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, lockSessionOffset, 0);
}

static addContractSerialNumber(builder:flatbuffers.Builder, contractSerialNumber:number) {
  builder.addFieldInt16(1, contractSerialNumber, 0);
}

static addSerialNumber(builder:flatbuffers.Builder, serialNumber:number) {
  builder.addFieldInt16(2, serialNumber, 0);
}

static addCounter(builder:flatbuffers.Builder, counter:number) {
  builder.addFieldInt16(3, counter, 0);
}

static endCommonMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCommonMetadata(builder:flatbuffers.Builder, lockSessionOffset:flatbuffers.Offset, contractSerialNumber:number, serialNumber:number, counter:number):flatbuffers.Offset {
  CommonMetadata.startCommonMetadata(builder);
  CommonMetadata.addLockSession(builder, lockSessionOffset);
  CommonMetadata.addContractSerialNumber(builder, contractSerialNumber);
  CommonMetadata.addSerialNumber(builder, serialNumber);
  CommonMetadata.addCounter(builder, counter);
  return CommonMetadata.endCommonMetadata(builder);
}
}
