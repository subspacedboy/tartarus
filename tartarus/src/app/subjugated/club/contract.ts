// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Capabilities } from '../../subjugated/club/capabilities.js';
import { EndCondition, unionToEndCondition, unionListToEndCondition } from '../../subjugated/club/end-condition.js';
import { TemporaryUnlockRules } from '../../subjugated/club/temporary-unlock-rules.js';
import { WebHook } from '../../subjugated/club/web-hook.js';


export class Contract {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Contract {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContract(bb:flatbuffers.ByteBuffer, obj?:Contract):Contract {
  return (obj || new Contract()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContract(bb:flatbuffers.ByteBuffer, obj?:Contract):Contract {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Contract()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

publicKey(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

publicKeyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

publicKeyArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

capabilities(index: number):Capabilities|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

capabilitiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

capabilitiesArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

isPartial():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

completeContractAddress():string|null
completeContractAddress(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
completeContractAddress(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

isUnremovable():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isBlind():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

encryptedContract(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

encryptedContractLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

encryptedContractArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

endConditionType():EndCondition {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : EndCondition.NONE;
}

endCondition<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

participants(index: number, obj?:WebHook):WebHook|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new WebHook()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

participantsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

isLockOnAccept():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

isTemporaryUnlockAllowed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

unlockRules(obj?:TemporaryUnlockRules):TemporaryUnlockRules|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new TemporaryUnlockRules()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startContract(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addPublicKey(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, publicKeyOffset, 0);
}

static createPublicKeyVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startPublicKeyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addCapabilities(builder:flatbuffers.Builder, capabilitiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, capabilitiesOffset, 0);
}

static createCapabilitiesVector(builder:flatbuffers.Builder, data:Capabilities[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCapabilitiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addIsPartial(builder:flatbuffers.Builder, isPartial:boolean) {
  builder.addFieldInt8(2, +isPartial, +false);
}

static addCompleteContractAddress(builder:flatbuffers.Builder, completeContractAddressOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, completeContractAddressOffset, 0);
}

static addIsUnremovable(builder:flatbuffers.Builder, isUnremovable:boolean) {
  builder.addFieldInt8(4, +isUnremovable, +false);
}

static addIsBlind(builder:flatbuffers.Builder, isBlind:boolean) {
  builder.addFieldInt8(5, +isBlind, +false);
}

static addEncryptedContract(builder:flatbuffers.Builder, encryptedContractOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, encryptedContractOffset, 0);
}

static createEncryptedContractVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startEncryptedContractVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addEndConditionType(builder:flatbuffers.Builder, endConditionType:EndCondition) {
  builder.addFieldInt8(7, endConditionType, EndCondition.NONE);
}

static addEndCondition(builder:flatbuffers.Builder, endConditionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, endConditionOffset, 0);
}

static addParticipants(builder:flatbuffers.Builder, participantsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, participantsOffset, 0);
}

static createParticipantsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParticipantsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addIsLockOnAccept(builder:flatbuffers.Builder, isLockOnAccept:boolean) {
  builder.addFieldInt8(10, +isLockOnAccept, +false);
}

static addIsTemporaryUnlockAllowed(builder:flatbuffers.Builder, isTemporaryUnlockAllowed:boolean) {
  builder.addFieldInt8(11, +isTemporaryUnlockAllowed, +false);
}

static addUnlockRules(builder:flatbuffers.Builder, unlockRulesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, unlockRulesOffset, 0);
}

static endContract(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
