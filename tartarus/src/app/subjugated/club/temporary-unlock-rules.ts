// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class TemporaryUnlockRules {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TemporaryUnlockRules {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTemporaryUnlockRules(bb:flatbuffers.ByteBuffer, obj?:TemporaryUnlockRules):TemporaryUnlockRules {
  return (obj || new TemporaryUnlockRules()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTemporaryUnlockRules(bb:flatbuffers.ByteBuffer, obj?:TemporaryUnlockRules):TemporaryUnlockRules {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TemporaryUnlockRules()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxUnlocks():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

timeLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startTemporaryUnlockRules(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMaxUnlocks(builder:flatbuffers.Builder, maxUnlocks:number) {
  builder.addFieldInt16(0, maxUnlocks, 0);
}

static addTimeLimit(builder:flatbuffers.Builder, timeLimit:number) {
  builder.addFieldInt16(1, timeLimit, 0);
}

static endTemporaryUnlockRules(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTemporaryUnlockRules(builder:flatbuffers.Builder, maxUnlocks:number, timeLimit:number):flatbuffers.Offset {
  TemporaryUnlockRules.startTemporaryUnlockRules(builder);
  TemporaryUnlockRules.addMaxUnlocks(builder, maxUnlocks);
  TemporaryUnlockRules.addTimeLimit(builder, timeLimit);
  return TemporaryUnlockRules.endTemporaryUnlockRules(builder);
}
}
